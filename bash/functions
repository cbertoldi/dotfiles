#
# Create a new directory and enter it
#
function mkd() {
	mkdir -p "$@" && cd "$@"
}

#
# Print tty which we're currently connected to
#
function which_tty() {
	temp=$(tty); echo ${temp:5}
}

#
# list Makefile available targets 
#
function targets() {
	if [ "$#" -eq 0 ]; then
		file=Makefile
	else
		file=$1
	fi
	cat $file | grep -e ':$' | cut -d : -f 1 -
}

#
# Function like zsh, to edit env variables on the fly.
# Credit: http://superuser.com/users/22317/daniel-beck
#
function vared {
  [[ $# -eq 1 ]] || { echo "Usage: vared VARNAME" >&2 ; return 1 ; }
  tmpfile=$( command mktemp -t vared.XXXX )
  echo "${!1}" > "$tmpfile"
  vi "$tmpfile" && export $1="$(< "$tmpfile" )"
  command rm "$tmpfile"
}

#
# Put part of the hostname in the tmux pane title.
# This is useful with hostnames like a1.test a1.prod
#
function ssh() {
	if [ -n "$TMUX" ]
	then
		TERM=xterm-256color command ssh "$@" -t 'printf "\033k$(hostname -f | cut -d . -f 1,2)\033\\"; bash -l';
		tmux set-window-option automatic-rename "on" 1>/dev/null;
	else
		command ssh "$@"
	fi
}


#
# Fetch a merge request
#

merge-request-fetch () {
    _merge_request="$1"

    _repository=$(basename $(pwd -P))

    git branch -D merge-requests/${_merge_request}

    # Check out a new branch for integration
    git checkout -b merge-requests/${_merge_request}

    # Fetch the merge request into this branch
    git pull git://gitorious.td.ubiquity.it/umg/${_repository}.git refs/merge-requests/${_merge_request}

    # Show the commits, assess they are okay
    git log --pretty=oneline --abbrev-commit master..merge-requests/${_merge_request}
}
alias mrf="merge-request-fetch"

#
# Apply a merge request
#

merge-request-apply () {
    _merge_request="$1"

    git checkout master
    # close-ticket

    git merge merge-requests/${_merge_request}

    git branch -d merge-requests/${_merge_request}

    # git push upstream master:master
}
alias mra="merge-request-apply"

#
# Update dev tracking branch, than rebase previous co branch
#

rebase-dev-rebase-branch () {
	_previous_branch=$(git branch | grep \* - | cut -d " " -f 2)

	git co dev

	git svn rebase

	git co ${_previous_branch}

	git rebase dev
}
alias rdrb="rebase-dev-rebase-branch"

merge-branch-dev () {
	_branch=$(git branch | grep \* - | cut -d " " -f 2)

	# rebase-dev-rebase-branch

	git co dev

	git merge ${_branch}
}
alias mbd="merge-branch-dev"

push-current-branch-to-origin () {
	# In order to get this to work, it's important to know that the
	# interesting output part will redirected to stderr, even with the
	# --porcelain option.
	_current_branch=$(git rev-parse --abbrev-ref HEAD)
	_output=$(git push --porcelain origin $_current_branch 2>&1)
	echo -n "$_output"
	echo -n "$_output" | grep pull-requests | cut -d: -f 2,3 | tr -d '[:space:]' | pbcopy
}
alias gpcb="push-current-branch-to-origin"
